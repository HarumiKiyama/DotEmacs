# -*- mode: org; coding: utf-8; -*-
#+TITLE: emacs config
#+DESCRIPTION: Just a try for literate programming
#+TAGS: notangle
#+STARTUP: showall
This is the GNU/Emacs config file of Harumi Kiyama inspired by [[https://karl-voit.at/2017/06/03/emacs-org/][karl voit]].
Note that all Elisp blocks part of a =notangle= tag or which are
marked with =:tangle no= won't be tangled to the =init.el= file.
* General Config
** package initialize
#+begin_src elisp 
  (package-initialize)
  (setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
			   ("melpa" . "http://elpa.emacs-china.org/melpa/")
			   ("org" . "http://elpa.emacs-china.org/org/")))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src
** personal information
#+begin_src elisp
(setq user-full-name "Harumi Kiyama"
      user-mail-address "h.kiyama0720@gmail.com")
#+end_src
** which key
add which key support
#+BEGIN_SRC elisp
  (use-package which-key
    :config
  ;; Allow C-h to trigger which-key before it is done automatically
  ;; (setq which-key-show-early-on-C-h t)
  ;; make sure which-key doesn't show normally but refreshes quickly after it is
  ;; triggered.
  ;; (setq which-key-idle-delay 10000)
  ;; (setq which-key-idle-secondary-delay 0.05)
    (which-key-mode))
#+END_SRC
** misc.
#+begin_src elisp
  (push '("/LICENSE\\'" . text-mode) auto-mode-alist)
  (push '("\\.log\\'" . text-mode) auto-mode-alist)
  (push '("\\.env\\'" . sh-mode) auto-mode-alist)
  (setq confirm-kill-emacs nil
	auto-save-default nil
	indent-tabs-mode nil
	tab-width 4
	make-backup-files nil)
  (use-package sicp)
#+end_src
** help system
#+begin_src elisp
  (use-package helpful
    :commands helpful--read-symbol
    :init
    (global-set-key [remap describe-key] #'helpful-key)
    (global-set-key [remap describe-symbol] #'helpful-symbol))
#+end_src
** keymap config tool
#+begin_src elisp
(use-package general)
#+end_src
** start and kill hooks
#+begin_src elisp
  (defun org-private-push ()
    "git commit and push to private remote repo"
    (call-process-shell-command "cd ~/org-mode && git add .&&git commit -m \"$(date +%Y/%m/%d)\"&&git push" nil 0 0))
  (defun org-private-pull ()
    (start-process-shell-command "git-pull" nil "cd ~/org-mode&& git pull"))
  (defun emacs-config-push ())
  (defun emacs-config-pull ())
  (add-hook 'kill-emacs-hook #'org-private-push)
  (add-hook 'kill-emacs-hook #'emacs-config-push)
  (add-hook 'emacs-startup-hook #'org-private-pull)
  (add-hook 'emacs-startup-hook #'emacs-config-pull)
#+end_src
* UI Config
** theme font and misc. config
#+begin_src elisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t)
    (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 180)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    (when (string= system-type "darwin")
      (setq dired-use-ls-dired nil)
      (toggle-frame-fullscreen))
    (setq fill-column 80)
    (server-start))
#+end_src
** modeline
** dashboard
** popup system
* Edit Config
** window config
#+BEGIN_SRC elisp
  (use-package ace-window
    :defer t
    :config
    (setq aw-keys '(?a ?s ?d ?f)
	  aw-scope 'frame
	  aw-background t)
    (general-define-key :prefix "C-x"
			"0" #'ace-delete-window
			"1" #'ace-delete-other-windows
			"o" #'ace-window))
#+END_SRC
** workspace
#+begin_src elisp
(use-package eyebrowse)
#+end_src
** avy config
#+begin_src elisp
  (use-package avy
    :config
    (avy-setup-default)
    (general-define-key :prefix "M-g"
			"w" #'avy-goto-word-1
			"g" #'avy-goto-line
			"c" #'avy-goto-char))
#+end_src
** projectile config
** magit config
#+begin_src elisp
  (use-package magit)
#+end_src
* Completion Config
** company config
#+begin_src elisp
  (use-package company
    :config
    (global-company-mode 1)
    (general-define-key :keymaps 'company-active-map
			"M-n" nil
			"M-p" nil
			"C-n" #'company-select-next
			"C-p" #'company-select-previous)

    (general-define-key :keymaps 'company-search-map
			"M-n" nil
			"M-p" nil
			"C-n" #'company-select-next
			"C-p" #'company-select-previous))
#+end_src
** ivy config
#+begin_src elisp
  (use-package ivy
    :config
    (setq ivy-height 17
	  ivy-wrap t
	  ivy-fixed-height-minibuffer t
	  projectile-completion-system 'ivy
	  ivy-use-virtual-buffers nil
	  ivy-virtual-abbreviate 'full
	  ivy-on-del-error-function #'ignore
	  ivy-use-selectable-prompt t)
    (ivy-mode 1))
  (use-package counsel
    :config
    (general-define-key
     "M-x" #'counsel-M-x
     "C-h f" #'counsel-describe-function
     "C-h v" #'counsel-describe-variable)
    (setq counsel-describe-function-function #'helpful-callable
	  counsel-describe-variable-function #'helpful-variable)
    )
  (use-package swiper
    :config
    (general-define-key
     "C-s" #'swiper))
  (use-package ivy-rich
    :after ivy
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (ivy-rich-mode 1))
  (use-package amx)
#+end_src
** yasnippet config
* org config
** org useful functions
** org general config
#+BEGIN_SRC elisp
  (use-package org :ensure org-plus-contrib :pin org
    :config
    (general-define-key :prefix "C-c"
			"c" #'org-capture
			"a" #'org-agenda-list
			"b" #'counsel-bookmark)
    (add-hook 'text-mode-hook 'auto-fill-mode)
    (add-hook 'ediff-prepare-buffer-hook #'show-all)
    (setq org-agenda-window-setup 'current-window
	  org-agenda-dim-blocked-tasks 'invisible
	  org-agenda-span 'day
	  org-agenda-start-on-weekday nil
	  org-agenda-start-day nil
	  org-agenda-files '("~/org-mode/task.org"
			     "~/org-mode/notation.org"
			     "~/org-mode/blog.org")
	  org-directory "~/org-mode/"

	  org-tag-alist '(("Routine" . ?r)
			  ("Algorithms" . ?a)
			  ("Reading" . ?R))
	  org-use-sub-superscripts '{}
	  org-priority-faces '((?A . (:foreground "red" :weight 'bold))
			       (?B . (:foreground "yellow"))
			       (?C . (:foreground "gray")))
	  org-refile-targets '(("~/org-mode/task.org" :maxlevel . 1)
			       ("~/org-mode/notes.org" :maxlevel . 1)
			       ("~/org-mode/someday.org" :maxlevel . 1)
			       ("~/org-mode/blog.org" :maxlevel . 1)
			       (nil . (:maxlevel . 2)))
	  org-refile-use-outline-path 'file
	  org-outline-path-complete-in-steps nil
	  org-archive-location "~/org-mode/archive.org::"
	  org-todo-keywords
	  '((sequence "TODO(t)" "START(s)" "SUSPEND(p)"
		      "|" "DONE(d!)" "ABORT(a!)"))
	  org-todo-keyword-faces '(("START" . (:inherit (bold org-scheduled-today)))
				   ("SUSPEND" . (:inherit (bold warning)))
				   ("ABORT" . (:inherit (bold error))))
	  org-clock-in-switch-to-state "START"
	  org-clock-out-switch-to-state "TODO"
	  org-clock-persist t
	  org-log-into-drawer t
	  org-src-preserve-indentation t
	  org-capture-templates '(("w" "Words" entry (file+headline "Esperanto.org" "Words")
				   "** word :drill:\n%^{Esperanto}[%^{English}]")
				  ("e" "Emacs" entry (file+headline "task.org" "Emacs Hacking") "** TODO %?")
				  ("a" "Algorithm" entry (file +create-algorithm-org-file) "* Description\n%?\n* Solution")
				  ("t" "Trivial" entry (file+headline "task.org" "Trivial") "** TODO %?")
				  ("b" "Blog" entry (file "blog.org") "* SUSPEND %?")
				  ;; Will use {org-directory}/{+org-capture-projects-file} and store
				  ;; these under {ProjectName}/{Tasks,Notes,Changelog} headings. They
				  ;; support `:parents' to specify what headings to put them under, e.g.
				  ;; :parents ("Projects")
				  ("o" "Centralized templates for projects")
				  ("ot" "Project todo" entry
				   (function +org-capture-central-project-todo-file)
				   "* TODO %?\n %i\n %a"
				   :heading "Tasks"
				   :prepend nil)
				  ("on" "Project notes" entry
				   (function +org-capture-central-project-notes-file)
				   "* %U %?\n %i\n %a"
				   :heading "Notes"
				   :prepend t)
				  ("oc" "Project changelog" entry
				   (function +org-capture-central-project-changelog-file)
				   "* %U %?\n %i\n %a"
				   :heading "Changelog"
				   :prepend t)))
    ;; babel config
    (setq org-src-preserve-indentation nil
	  org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages '((python . t)
				 (elisp . t)
				 (scheme . t)))
    ;; Refresh inline images after executing src blocks, be useful for
    ;; result could be an image
    (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images))
#+END_SRC
** use ox-hugo to export blog
#+begin_src elisp
(use-package ox-hugo
  :after ox
  :config
  (setq org-hugo-export-with-toc t))
#+end_src
** org journal
#+begin_src elisp
  (defun org-journal-close-window ()
    (interactive)
    (save-buffer)
    (kill-buffer-and-window))
  (use-package org-journal
    :config
    (add-hook 'org-journal-mode-hook 'auto-fill-mode)
    (setq org-journal-dir "~/org-mode/journal/"
	  org-journal-date-format "%Y-%m-%d %A")
    (general-define-key :keymaps 'org-journal-mode-map
			"C-c C-c" #'org-journal-close-window))
#+end_src
* Programming Languages Config
** lisp like language config
#+begin_src elisp
  (use-package lispy
    :hook
    ((common-lisp-mode . lispy-mode)
     (emacs-lisp-mode . lispy-mode)
     (scheme-mode . lispy-mode)
     (racket-mode . lispy-mode)
     (hy-mode . lispy-mode)
     (lfe-mode . lispy-mode)
     (dune-mode . lispy-mode)
     (clojure-mode . lispy-mode))
    :config
    (setq lispy-close-quotes-at-end-p t)
  )
#+end_src
*** elisp config
#+begin_src elisp
(use-package elisp-demos
  :defer t
  :init
  (advice-add 'describe-function-1 :after #'elisp-demos-advice-describe-function-1)
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
(use-package eros
  :hook (emacs-lisp-mode . eros-mode))
#+end_src
*** scheme config
#+begin_src elisp
(use-package geiser
  :init
  (setq geiser-active-implementations '(guile chicken)
        geiser-default-implementation 'guile
        scheme-program-name "guile"))
#+end_src
** python config
** rust config
** Coq config
** SUSPEND lsp							   :notangle:
#+begin_src elisp 
(use-package 'nox
  :config
  (dolist (hook (list
                 'rust-mode-hook
                 'python-mode-hook
                 'sh-mode-hook
                 'c-mode-common-hook
                 'c-mode-hook))
    (add-hook hook '(lambda () (nox-ensure)))))
#+end_src
* Natural Languages Config
** English
* Hydra Config
#+BEGIN_SRC elisp
  (use-package hydra
    :config
    (defhydra hydra-navigation
      (global-map "C-[")
      "vim"))
#+END_SRC

